<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lagou.dao.UserMapper">

    <!--   用户分页&多条件查询 public List<User> findAllUserByPage(UserVo userVo);-->
    <select id="findAllUserByPage" parameterType="com.lagou.domain.UserVo" resultType="com.lagou.domain.User">
        select * from user
        <where>
            <if test="true">
                and is_del != 1
            </if>

            <if test="username != null and username != ''">
                and name = #{username}
            </if>

            <if test="startCreateTime != null and endCreateTime != null">
                and create_time between #{startCreateTime} and #{endCreateTime}
            </if>
        </where>
    </select>


    <!--     修改用户状态 public void updateUserStatus(User user);-->
    <update id="updateUserStatus" parameterType="com.lagou.domain.User">
        update user set status = #{status},update_time = #{update_time} where id = #{id}
    </update>

    <!--     用户登陆（根据用户名查询具体的用户信息） public User login(User user);-->
    <select id="login" parameterType="com.lagou.domain.User" resultType="com.lagou.domain.User">
        select * from user where phone = #{phone}
    </select>


    <!--     根据用户ID清空中间表 public void deleteUserContextRole(Integer userId);-->
    <delete id="deleteUserContextRole" parameterType="int">
        delete from user_role_relation where user_id = #{userId}
    </delete>

    <!--     分配角色 public void userContextRole(User_Role_relation user_role_relation);-->
    <insert id="userContextRole" parameterType="com.lagou.domain.User_Role_relation">
        insert into user_role_relation values(null,#{userId},#{roleId},#{createdTime},#{updatedTime},#{createdBy},#{updatedby})
    </insert>


    <!--    1.根据用户ID查询关联的角色信息 public List<Role> findUserRelationRoleById(Integer userId);-->
    <select id="findUserRelationRoleById" resultType="com.lagou.domain.Role" parameterType="int">
        select * from
        roles r inner join user_role_relation ur on r.id = ur.role_id
        where ur.user_id = #{userId}
    </select>

<!--    2.根据角色ID，查询角色所拥有的顶级菜单（-1） public List<Menu> findParentMenuByRoleId(List<Integer> ids);-->
    <select id="findParentMenuByRoleId" parameterType="java.util.List" resultType="com.lagou.domain.Menu">
        SELECT
        DISTINCT m.*
        FROM
        roles r INNER JOIN role_menu_relation rm ON r.id = rm.role_id
        INNER JOIN menu m ON m.id =rm.menu_id
        WHERE
        m.parent_id = -1 AND r.id IN
        <foreach collection="list" item="item" index="index" separator="," open="(" close=")">
            #{ids[${index}]}
        </foreach>

    </select>
    <!--     3.根据父菜单，查询子菜单信息 public List<Menu> findSubMenuByPid(Integer pid);-->
    <select id="findSubMenuByPid" parameterType="int" resultType="com.lagou.domain.Menu">
        select * from menu where parent_id = #{pid}
    </select>

    <!--    4.获取用户拥有的资源权限信息 public List<Resource> findResourceByRoleId(List<Integer> ids);-->

    <select id="findResourceByRoleId" resultType="com.lagou.domain.Resource" parameterType="java.util.List">
          select distinct r.*
          from
             resource r inner join role_resource_relation rr on r.id = rr.resource_id
                inner join roles ro on ro.id = rr.role_id
                where ro.id in
                <foreach collection="list" item="item" index="index" separator="," open="(" close=")">
                    #{ids[${index}]}
                </foreach>
    </select>
</mapper>